include mixins
html
    head
        meta(charset="utf-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1")

        title ChimithÃ¨que

        link(href=c.AppURL + c.AppPath + "static/css/animate.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/bootstrap-colorpicker.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/bootstrap-table.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/bootstrap-toggle.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/bootstrap.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/fontawesome.all.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/materialdesignicons.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/select2.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/trumbowyg.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/trumbowyg.colors.min.css",  rel="stylesheet" )
        link(href=c.AppURL + c.AppPath + "static/css/print.css",  rel="stylesheet" )

        link(rel="shortcut icon" href=c.AppURL + c.AppPath + "static/img/favicon.ico" type="image/x-icon")
        link(rel="icon" href=c.AppURL + c.AppPath + "static/img/favicon.ico" type="image/x-icon")

        script(src=c.AppURL + c.AppPath + "static/js/jquery.min.js")
        script(src=c.AppURL + c.AppPath + "static/js/popper.min.js" )
        script(src=c.AppURL + c.AppPath + "static/js/bootstrap.min.js" )

        link(href=c.AppURL + c.AppPath + "static/css/chimitheque.css",  rel="stylesheet" )

    body
        div#message
        div#loading.row.h-100.justify-content-center.align-items-center
            .card.text-center.m-sm-3.p-sm-3(style="width: 18rem;")
                object(data=c.AppPath + "static/img/web-assembly-logo-black.svg" style="display: block; margin: auto;" preserveAspectRatio="xMinYMin meet" width="35%" viewBox="0 0 25 25")
                .card-body
                    .card-text
                        span.mdi.mdi-loading.mdi-spin
                            = T("wasm_loading", 1) 
        div.container.invisible

            span.text-right#logged.blockquote-footer

            div#video.border.border-primary.invisible(style="position: absolute; z-index:1; background-color: white;")
                video(width="640", id="qr-video", muted, playsinline)
                button(type="button", onclick="closeQR()").btn.btn-link
                    span.mdi.mdi-close-box &nbsp;

            div#menu
            div#export.card.border-0.collapse.hide
                div#export-body.card-body
            div#searchbar.collapse.show
            div#content

    include localejs
    
    -
        json, _ := json.Marshal(c)
    
    script.           
        //
        // global variables init
        //

        // request context
        var c = !{fmt.Sprintf("%s", json)};       

    script(src=c.AppURL + c.AppPath + "static/js/bootstrap-table.min.js" )
    script(src=c.AppURL + c.AppPath + "static/js/bootstrap-colorpicker.min.js" )                      
    script(src=c.AppURL + c.AppPath + "static/js/jquery.validate.min.js" )
    script(src=c.AppURL + c.AppPath + "static/js/jquery.validate.additional-methods.min.js" )
    script(src=c.AppURL + c.AppPath + "static/js/select2.full.min.js" )
    script(src=c.AppURL + c.AppPath + "static/js/print.js" )
    script(src=c.AppURL + c.AppPath + "static/js/qr-scanner.umd.min.js" )
    script(src=c.AppURL + c.AppPath + "static/js/pako.min.js" )
    
    script.
        QrScanner.WORKER_PATH = c.AppURL + c.AppPath + 'static/js/qr-scanner-worker.min.js';
        window.QrScanner = QrScanner;

    script.
        function scanQR() {
            $("#video").removeClass("invisible")
            const video = document.getElementById("qr-video");
            window.qrScanner = new window.QrScanner(video, result => Storage_scanQRdone(result));
            QrScanner.hasCamera().then(hasCamera => {
                if (hasCamera) {
                    window.qrScanner.start();
                } else {
                    alert(Utils_translate("nocamera", c.PersonLanguage));
                    Storage_closeQR();
                }
            });
        }
        function scanPersonQR() {
            $("#video").removeClass("invisible")
            const video = document.getElementById("qr-video");
            window.qrScanner = new window.QrScanner(video, result => Person_scanQRdone(result));
            QrScanner.hasCamera().then(hasCamera => {
                if (hasCamera) {
                    window.qrScanner.start();
                } else {
                    alert(Utils_translate("nocamera", c.PersonLanguage));
                    Storage_closeQR();
                }
            });
        }
        function closeQR() {
            $("div#video").addClass("invisible")
            window.qrScanner.destroy();
            window.qrScanner = null;
        }
        function load2dimage() {
            if (!window.FileReader) {
                return alert('FileReader API is not supported by your browser.');
            }
            molfile = $('#product_twodformula')[0];
            if (molfile.files && molfile.files[0]) {
                file = molfile.files[0]; // The file
                fr = new FileReader(); // FileReader instance
                fr.onload = function () {
                    $('#hidden_product_twodformula_content').append(fr.result);
                };
                fr.error = function () {
                    alert("error loading image.")
                };
                fr.readAsDataURL(file);
            } else {
                // Handle errors here
                alert("file not selected or browser incompatible.")
            }
        }

    script(src=c.AppURL + c.AppPath + "static/js/wasm_exec.js")
    script.

        // https://levelup.gitconnected.com/best-practices-for-webassembly-using-golang-1-15-8dfa439827b8
        (async function loadAndRunGoWasm() {
            const go = new Go();

            // gzip -9 -v -c wasm > wasm.gz
            const buffer = pako.ungzip(await (await fetch(c.AppURL + c.AppPath + "wasm/wasm.gz")).arrayBuffer());
          
            // A fetched response might be decompressed twice on Firefox.
            // See https://bugzilla.mozilla.org/show_bug.cgi?id=610679
            if (buffer[0] === 0x1f && buffer[1] === 0x8b) {
                buffer = pako.ungzip(buffer);
            }

            const result = await WebAssembly.instantiate(buffer, go.importObject);
            go.run(result.instance)
        })()   
       
    block CONTENTJS
